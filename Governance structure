// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

contract WEUFoundation is AccessControl {

    enum Role {Developers, Investor, User}
    enum _GovernanceModel {CouncilMembers, TechnicalCommittee, ResearchCommittee}

    struct Member {
        Role role;
        uint256 shares;
        bool exists;
    }

    struct Governance {
        _GovernanceModel _governance_Model;
        address[] members;
        bool active;
        string governanceModel;
    }

    address[] public committeeAddresses;
    mapping(_GovernanceModel => mapping(address => Member)) public members;
    mapping(Role => uint) public totalShares;
    uint256 public revenuePool;
    IERC20 public inputToken;

    event newCommitteeMemberAdded(address committeeAddress, _GovernanceModel model, Role role);
    event GovernanceModelActivated(_GovernanceModel Model);
    event FoundationFunded(uint256 amount);
    event CommitteeMemberRemoved(address committeeAddress, _GovernanceModel model, Role role);

    constructor(address _inputTokenAddress){
        inputToken = IERC20(_inputTokenAddress);

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
    }

    function addMember(address committeeAddress, _GovernanceModel model, Role role, uint256 shares) external payable onlyRole(DEFAULT_ADMIN_ROLE) {
        require(model != _GovernanceModel.CouncilMembers, "Council members are automatically included.");
        require(!members[model][committeeAddress].exists, "Member already exists.");
        members[model][committeeAddress] = Member(role, shares, true);
        totalShares[role] += shares;
        committeeAddresses.push(committeeAddress);
        emit newCommitteeMemberAdded(committeeAddress, model, role);
    }

    function activateGovernanceModel(_GovernanceModel model) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(!members[model][msg.sender].exists, "Cannot activate model as a committee member.");
        require(!members[_GovernanceModel.CouncilMembers][msg.sender].exists, "Cannot activate model as a council member.");
        emit GovernanceModelActivated(model);
    }

    function fundFoundation(uint256 amount) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(amount > 0, "Amount must be greater than zero.");
        inputToken.transferFrom(msg.sender, address(this), amount);
        revenuePool += amount;
        emit FoundationFunded(amount);
    }

    }
